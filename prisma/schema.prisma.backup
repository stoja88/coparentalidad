// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Modelo de Usuario
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(PARENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relaciones
  families      FamilyMember[]
  messages      Message[]
  expenses      Expense[]
  documents     Document[]
  events        Event[]
  accounts      Account[]
  sessions      Session[]
  sentInvitations FamilyInvitation[] @relation("SentInvitations")
}

// Modelo de Cuenta (para autenticación)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Modelo de Sesión
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Modelo de Familia
model Family {
  id          String        @id @default(cuid())
  name        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  members     FamilyMember[]
  events      Event[]
  expenses    Expense[]
  documents   Document[]
  messages    Message[]
  invitations FamilyInvitation[]
}

// Modelo de Miembro de Familia
model FamilyMember {
  id        String   @id @default(cuid())
  userId    String
  familyId  String
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  family    Family   @relation(fields: [familyId], references: [id], onDelete: Cascade)
}

// Modelo de Invitación a Familia
model FamilyInvitation {
  id          String   @id @default(cuid())
  familyId    String
  email       String
  role        Role
  status      InvitationStatus @default(PENDING)
  invitedById String
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  family      Family   @relation(fields: [familyId], references: [id], onDelete: Cascade)
  invitedBy   User     @relation("SentInvitations", fields: [invitedById], references: [id])
}

// Modelo de Evento (Calendario)
model Event {
  id          String   @id @default(cuid())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime
  location    String?
  createdById String
  familyId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  createdBy   User     @relation(fields: [createdById], references: [id])
  family      Family   @relation(fields: [familyId], references: [id], onDelete: Cascade)
}

// Modelo de Mensaje
model Message {
  id          String   @id @default(cuid())
  content     String
  senderId    String
  familyId    String
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  sender      User     @relation(fields: [senderId], references: [id])
  family      Family   @relation(fields: [familyId], references: [id], onDelete: Cascade)
}

// Modelo de Documento
model Document {
  id          String   @id @default(cuid())
  title       String
  description String?
  fileUrl     String
  fileType    String
  uploaderId  String
  familyId    String
  category    DocumentCategory
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  uploader    User     @relation(fields: [uploaderId], references: [id])
  family      Family   @relation(fields: [familyId], references: [id], onDelete: Cascade)
}

// Modelo de Gasto
model Expense {
  id          String   @id @default(cuid())
  title       String
  amount      Float
  date        DateTime
  description String?
  receipt     String?
  category    ExpenseCategory
  createdById String
  familyId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  createdBy   User     @relation(fields: [createdById], references: [id])
  family      Family   @relation(fields: [familyId], references: [id], onDelete: Cascade)
}

// Enumeraciones
enum Role {
  PARENT
  LEGAL_GUARDIAN
  ADMIN
}

enum DocumentCategory {
  LEGAL
  MEDICAL
  EDUCATIONAL
  FINANCIAL
  OTHER
}

enum ExpenseCategory {
  EDUCATION
  HEALTH
  CLOTHING
  FOOD
  ENTERTAINMENT
  TRANSPORTATION
  OTHER
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
} 