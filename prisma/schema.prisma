generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String             @id @default(cuid())
  name            String?
  email           String             @unique
  emailVerified   DateTime?
  image           String?
  password        String?
  role            Role               @default(PARENT)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  accounts        Account[]
  documents       Document[]
  events          Event[]
  expenses        Expense[]
  sentInvitations FamilyInvitation[] @relation("SentInvitations")
  families        FamilyMember[]
  messages        Message[]
  sessions        Session[]
  mediador        Mediador?
  partesCaso      ParteCaso[]
  subscriptionPlanId String?
  subscriptionPlan   SubscriptionPlan? @relation("UserSubscription", fields: [subscriptionPlanId], references: [id])
  lawyer             Lawyer?
  reviews            Review[]
  payments           Payment[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Family {
  id          String             @id @default(cuid())
  name        String
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  documents   Document[]
  events      Event[]
  expenses    Expense[]
  invitations FamilyInvitation[]
  members     FamilyMember[]
  messages    Message[]
}

model FamilyMember {
  id        String   @id @default(cuid())
  userId    String
  familyId  String
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  family    Family   @relation(fields: [familyId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FamilyInvitation {
  id          String           @id @default(cuid())
  familyId    String
  email       String
  role        Role
  status      InvitationStatus @default(PENDING)
  invitedById String
  expiresAt   DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  family      Family           @relation(fields: [familyId], references: [id], onDelete: Cascade)
  invitedBy   User             @relation("SentInvitations", fields: [invitedById], references: [id])
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime
  location    String?
  createdById String
  familyId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User     @relation(fields: [createdById], references: [id])
  family      Family   @relation(fields: [familyId], references: [id], onDelete: Cascade)
}

model Message {
  id        String   @id @default(cuid())
  content   String
  senderId  String
  familyId  String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  family    Family   @relation(fields: [familyId], references: [id], onDelete: Cascade)
  sender    User     @relation(fields: [senderId], references: [id])
}

model Document {
  id          String           @id @default(cuid())
  title       String
  description String?
  fileUrl     String
  fileType    String
  uploaderId  String
  familyId    String
  category    DocumentCategory
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  family      Family           @relation(fields: [familyId], references: [id], onDelete: Cascade)
  uploader    User             @relation(fields: [uploaderId], references: [id])
}

model Expense {
  id          String          @id @default(cuid())
  title       String
  amount      Float
  date        DateTime
  description String?
  receipt     String?
  category    ExpenseCategory
  createdById String
  familyId    String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  createdBy   User            @relation(fields: [createdById], references: [id])
  family      Family          @relation(fields: [familyId], references: [id], onDelete: Cascade)
}

enum Role {
  PARENT
  LEGAL_GUARDIAN
  ADMIN
  MEDIADOR
}

enum DocumentCategory {
  LEGAL
  MEDICAL
  EDUCATIONAL
  FINANCIAL
  OTHER
}

enum ExpenseCategory {
  EDUCATION
  HEALTH
  CLOTHING
  FOOD
  ENTERTAINMENT
  TRANSPORTATION
  OTHER
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

// Mediador (profesional que realiza la mediación familiar)
model Mediador {
  id                String    @id @default(cuid())
  userId            String?   @unique
  user              User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  nombre            String
  apellidos         String
  email             String    @unique
  telefono          String?
  especialidad      String?
  experiencia       Int?
  numColegiado      String?
  formacion         String?
  idiomas           String[]
  disponibilidad    String?
  verificado        Boolean   @default(false)
  fechaVerificacion DateTime?
  avatar            String?
  casos             Caso[]
  sesiones          Sesion[]
  documentos        Documento[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

// Caso de mediación
model Caso {
  id               String       @id @default(cuid())
  titulo           String
  tipo             String
  estado           String       @default("En proceso")
  descripcion      String?
  fechaInicio      DateTime     @default(now())
  fechaCierre      DateTime?
  progreso         Int          @default(0)
  mediadorId       String
  mediador         Mediador     @relation(fields: [mediadorId], references: [id], onDelete: Cascade)
  partes           ParteCaso[]
  sesiones         Sesion[]
  documentos       Documento[]
  mensajes         Mensaje[]
  notas            Nota[]
  proximaAccion    String?
  fechaProximaAccion DateTime?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

// Parte involucrada en un caso de mediación
model ParteCaso {
  id        String   @id @default(cuid())
  userId    String?
  casoId    String
  nombre    String
  rol       String
  email     String
  telefono  String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user       User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  caso       Caso         @relation(fields: [casoId], references: [id], onDelete: Cascade)
  documentos Documento[]
  mensajes   Mensaje[]
  sesiones   Sesion[]     @relation("ParteCasoToSesion")

  @@unique([casoId, email])
}

// Sesión de mediación
model Sesion {
  id         String   @id @default(cuid())
  casoId     String
  mediadorId String
  fecha      DateTime
  hora       String
  duracion   String
  tipo       String
  ubicacion  String?
  estado     String   @default("Programada")
  notas      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  caso       Caso        @relation(fields: [casoId], references: [id], onDelete: Cascade)
  mediador   Mediador    @relation(fields: [mediadorId], references: [id], onDelete: Cascade)
  documentos Documento[]
  partes     ParteCaso[] @relation("ParteCasoToSesion")
}

// Documento en un caso de mediación
model Documento {
  id               String      @id @default(cuid())
  casoId           String
  caso             Caso        @relation(fields: [casoId], references: [id], onDelete: Cascade)
  nombre           String
  tipo             String
  tamaño           String
  url              String
  estado           String      @default("Compartido")
  subidoPorParteId String?
  subidoPorParte   ParteCaso?  @relation(fields: [subidoPorParteId], references: [id], onDelete: SetNull)
  subidoPorMediadorId String?
  subidoPorMediador Mediador?  @relation(fields: [subidoPorMediadorId], references: [id], onDelete: SetNull)
  sesionId         String?
  sesion           Sesion?     @relation(fields: [sesionId], references: [id], onDelete: SetNull)
  fechaSubida      DateTime    @default(now())
  fechaFirma       DateTime?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
}

// Mensaje en un caso de mediación
model Mensaje {
  id               String     @id @default(cuid())
  casoId           String
  caso             Caso       @relation(fields: [casoId], references: [id], onDelete: Cascade)
  remitenteTipo    String     // "mediador" o "parte"
  remitenteParteId String?
  remitenteParte   ParteCaso? @relation(fields: [remitenteParteId], references: [id], onDelete: SetNull)
  contenido        String
  leido            Boolean    @default(false)
  fechaEnvio       DateTime   @default(now())
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

// Nota privada del mediador
model Nota {
  id               String    @id @default(cuid())
  casoId           String
  caso             Caso      @relation(fields: [casoId], references: [id], onDelete: Cascade)
  contenido        String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

// Modelo para el Marketplace
model MarketplaceItem {
  id          String    @id @default(cuid())
  title       String
  description String    @db.Text
  price       Float
  category    String
  image       String?
  featured    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Modelo para Abogados y Mediadores
model Lawyer {
  id          String    @id @default(cuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  specialties String[]
  bio         String    @db.Text
  verified    Boolean   @default(false)
  rating      Float     @default(0)
  reviews     Review[]
  education   String[]
  experience  Int       @default(0) // Años de experiencia
  languages   String[]
  areas       String[]
  available   Boolean   @default(true)
  location    String?
  website     String?
  services    Service[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Servicios ofrecidos por los abogados
model Service {
  id          String    @id @default(cuid())
  title       String
  description String    @db.Text
  price       Float
  duration    Int       // Duración en minutos
  lawyerId    String
  lawyer      Lawyer    @relation(fields: [lawyerId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Reseñas para abogados
model Review {
  id          String    @id @default(cuid())
  rating      Int
  comment     String    @db.Text
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  lawyerId    String
  lawyer      Lawyer    @relation(fields: [lawyerId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Modelo para pagos
model Payment {
  id            String    @id @default(cuid())
  amount        Float
  status        String    // pending, completed, failed, refunded
  paymentMethod String
  description   String?
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoiceUrl    String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Modelo para planes de suscripción
model SubscriptionPlan {
  id          String    @id @default(cuid())
  name        String
  description String    @db.Text
  price       Float
  interval    String    // monthly, yearly
  features    String[]
  active      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  users       User[]    @relation("UserSubscription")
}
